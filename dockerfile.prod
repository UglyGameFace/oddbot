# Dockerfile.prod - PRODUCTION DOCKERFILE WITH MULTI-STAGE BUILD
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Create app directory
WORKDIR /app

# Copy package files and install all dependencies for caching
COPY package*.json ./
RUN npm install

# Copy the rest of the application source code
COPY . .

# Run the build validation script
RUN npm run build

# --- Production Stage ---
FROM node:18-alpine AS production

# Install only runtime dependencies needed
RUN apk add --no-cache curl

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && adduser -S parlay-bot -u 1001

# Set timezone
ENV TZ=America/New_York

WORKDIR /app

# Copy necessary files from the builder stage
# This includes the pruned node_modules (only production deps) and the source code
COPY --from=builder --chown=parlay-bot:nodejs /app/src ./src
COPY --from=builder --chown=parlay-bot:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=parlay-bot:nodejs /app/package.json ./package.json

# Switch to the non-root user
USER parlay-bot

# Health check to ensure the application is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:3000/health/liveness || exit 1

# Expose the application port
EXPOSE 3000

# Start the application
CMD ["npm", "start"]
